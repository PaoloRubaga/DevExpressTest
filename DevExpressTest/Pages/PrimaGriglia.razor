@page "/primaGriglia"

@using DataAccessLibrary.Models
@using DataAccessLibrary
@using DevExpressTest.Components

@inject IDispositivoData _db

<h3>PrimaGriglia</h3>

<input type="text" @bind-value="FilterText" @bind-value:event="oninput" placeholder="Search" />

<DxButton Text ="Seleziona Colonne"
    RenderStyle="ButtonRenderStyle.Secondary"
    CssClass="column-chooser-button"
    Click="OnClick">
</DxButton>

<DxGrid Data=@listaDispositivi
    EditModelSaving="ModificaDispositivoDX"
    EditMode="GridEditMode.PopupEditForm"
        DataItemDeleting="EliminaDispositivoDX"
        ShowFilterRow="true"
    @ref="Grid">
    <Columns>
        
        <DxGridSelectionColumn />
        <DxGridDataColumn FieldName="Matricola" />
        <DxGridDataColumn FieldName="Descrizione"  />
        <DxGridDataColumn FieldName="Modello"  />
        <DxGridCommandColumn />
        
    </Columns>
    <EditFormTemplate Context="editFormContent ">
        @{
            dispositivoDaModificare = (DispositivoModel)editFormContent.DataItem;
            dispositivoModificato = (DispositivoModel)editFormContent.EditModel;
        }
        <DxFormLayout>
            <DxFormLayoutItem Caption="Matricola:">
                <DxTextBox @bind-Text="@dispositivoModificato.Matricola" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Descrizione:">
                <DxTextBox @bind-Text="@dispositivoModificato.Descrizione" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Modello:">
                <DxTextBox @bind-Text="@dispositivoModificato.Modello" />
            </DxFormLayoutItem>
        </DxFormLayout>
    </EditFormTemplate>
</DxGrid>

<p />
<DxButton Click="@(() => Grid.SortBy("Descrizione"))">ordina per descrizione</DxButton>




@code {
    DxGrid Grid { get; set; }
    IGrid? UsersGrid { get; set; }
    private List<DispositivoModel> listaDispositivi;
    private List<DispositivoModel> viewDispositivi;
    private DispositivoModel newDispositivo = new DispositivoModel();
    private DispositivoModel dispositivoDaModificare;
    private DispositivoModel dispositivoModificato;
    string matricolaPk;


    protected override async Task OnInitializedAsync()
    {
        listaDispositivi = await _db.GetDispositivo();
    }


    async Task ModificaDispositivoDX(GridEditModelSavingEventArgs e)
    {

        var DispositivoModified = (DispositivoModel)e.EditModel;

        //var dataItem = e.IsNew ? new DispositivoModel() : listaDispositivi.Find(editModel.Matricola);

        if (dispositivoDaModificare is null)
        {
            await _db.InsertDispositivo(dispositivoModificato);
        }
        else
            await _db.UpdateDispositivo(dispositivoDaModificare.Matricola, dispositivoModificato);
        await OnInitializedAsync();
    }

    async Task AggiungiDispositivoDX(GridEditModelSavingEventArgs e)
    {

        var DispositivoModified = (DispositivoModel)e.EditModel;

        //var dataItem = e.IsNew ? new DispositivoModel() : listaDispositivi.Find(editModel.Matricola);
        if(dispositivoDaModificare is null)
        {
            await _db.InsertDispositivo(dispositivoModificato);
        }
        else
        await _db.UpdateDispositivo(dispositivoDaModificare.Matricola, dispositivoModificato);
        await OnInitializedAsync();
    }

    async Task EliminaDispositivoDX(GridDataItemDeletingEventArgs e)
    {

        var DispositivoDeleted = (DispositivoModel)e.DataItem;

        //var dataItem = e.IsNew ? new DispositivoModel() : listaDispositivi.Find(editModel.Matricola);

        await _db.DeleteDispositivo(DispositivoDeleted);
        await OnInitializedAsync();
    }

    private async Task InsertDispositivo()
    {
        await _db.InsertDispositivo(newDispositivo);
        newDispositivo = new DispositivoModel();
        await OnInitializedAsync();
    }

    private async Task DeleteDispositivo(DispositivoModel d)
    {
        await _db.DeleteDispositivo(d);
        await OnInitializedAsync();
    }

    private async Task UpdateDispositivo()
    {
        await _db.UpdateDispositivo(matricolaPk, dispositivoDaModificare);

        dispositivoDaModificare = null;
        await OnInitializedAsync();
    }

    private async Task ModificaDispositivo(DispositivoModel d)
    {
        dispositivoDaModificare = new DispositivoModel
            {
                Matricola = d.Matricola,
                Descrizione = d.Descrizione,
                Modello = d.Modello
            };
        matricolaPk = d.Matricola;
        await OnInitializedAsync();
    }

    void OnClick()
    {
        Grid.ShowColumnChooser(".column-chooser-button");
    }

    List<DispositivoModel> FilteredData { get; set; }
    DispositivoModel Value { get; set; }

    string _filterText = "";
    string FilterText
    {
        get { return _filterText; }
        set
        {
            _filterText = value;
            FilteredData = listaDispositivi.FindAll(x => x.Text.Contains(_filterText, StringComparison.OrdinalIgnoreCase));
            Value = FilteredData.FirstOrDefault();
            InvokeAsync(StateHasChanged);
        }
    }

    void OnClick2()
    {
        Grid.ShowColumnChooser(".column-chooser-button");
    }



}
