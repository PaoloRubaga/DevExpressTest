@page "/primaGriglia"

@using DataAccessLibrary.Models
@using DataAccessLibrary
@using DevExpressTest.Components
@using DevExpressTest.Data
@using DevExpressTest.Reports
@using DevExpress.XtraReports.Configuration
@using DevExpress.XtraReports.Data
@using BlazorPro.BlazorSize

@implements IDisposable

@inject IDispositivoData _db
@inject IResizeListener listener
@inject IMediaQueryService MediaQueryService


<h3>PrimaGriglia</h3>

<h1>Window width: @WindowWidth</h1>
<h1>Window height: @WindowHeight</h1>

<input type="text" @bind-value="FilterText" @bind-value:event="oninput" placeholder="Search" />

<DxButton Text ="Seleziona Colonne"
    RenderStyle="ButtonRenderStyle.Secondary"
    CssClass="column-chooser-button"
    Click="OnClick">
</DxButton>

<DxGrid Data=@listaDispositivi
    EditModelSaving="ModificaDispositivoDX"
    EditMode="GridEditMode.PopupEditForm"
    DataItemDeleting="EliminaDispositivoDX"
    ShowFilterRow="true"
    @ref="Grid"
    DetailRowDisplayMode="GridDetailRowDisplayMode.Never"
    CustomizeElement="Grid_CustomizeElement">
    <Columns>
        <DxGridSelectionColumn Visible=@visibleSelection />
        <DxGridDataColumn FieldName="Matricola" Visible=@visibleMatricola />
        <DxGridDataColumn FieldName="Descrizione" Visible=@visibleDescrizione />
        <DxGridDataColumn FieldName="Modello" Visible=@visibleModello />
        
        <DxGridCommandColumn Visible=@visibleCommand />
    </Columns>
    <DetailRowTemplate>
        @{
            var disp = (DispositivoModel)context.DataItem;
            <text>Matricola: @disp.Matricola</text>

            <br />
            <text>Descrizione: @disp.Descrizione</text>

            <br />
            <text>Modello: @disp.Modello</text>

            <br />
        }
    </DetailRowTemplate>
    <EditFormTemplate Context="editFormContent ">
        @{
            dispositivoDaModificare = (DispositivoModel)editFormContent.DataItem;
            dispositivoModificato = (DispositivoModel)editFormContent.EditModel;
        }
        <DxFormLayout>
            <DxFormLayoutItem Caption="Matricola:">
                <DxTextBox @bind-Text="@dispositivoModificato.Matricola" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Descrizione:">
                <DxTextBox @bind-Text="@dispositivoModificato.Descrizione" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Modello:">
                <DxTextBox @bind-Text="@dispositivoModificato.Modello" />
            </DxFormLayoutItem>
        </DxFormLayout>
    </EditFormTemplate>
</DxGrid>



    <p />
    <DxButton Click="@(() => Grid.SortBy("Descrizione"))">ordina per descrizione</DxButton>
    <p />

@if (IsSmall)
{
    <p>IsSmall = true</p>
}
else
{
    <p>IsSmall = false</p>
}

@if (IsMedium)
{
    <span>Medium</span>
}

<MediaQuery Media="@Breakpoints.OnlyMedium" @bind-Matches="IsMedium" />
<MediaQuery Media="@Breakpoints.SmallDown" @bind-Matches="IsSmall" />

<h3>Dimensione Finestra:</h3>
<p>Larghezza: @WindowWidth2</p>
<p>Altezza: @WindowHeight2</p>






@code {
    private BrowserWindowSize WindowSize { get; set; }

    private void OnWindowResized(object sender, BrowserWindowSize windowSize)
    {
        WindowSize = windowSize;
        WindowWidth2 = windowSize.Width;
        WindowHeight2 = windowSize.Height;
        StateHasChanged();
    }



    public int WindowWidth2 { get; set; }
    public int WindowHeight2 { get; set; }
    bool IsMedium = false;
    bool IsSmall = false;

    public int WindowWidth { get; set; }
    public int WindowHeight { get; set; }
    bool mobile = false;
    public bool visibleMatricola = true, visibleDescrizione = true, visibleModello = true, visibleCommand = true, visibleSelection = true;
    BrowserWindowSize browser = new BrowserWindowSize();
    bool IsSmallMedia = false;


    //in base alla larghezza mostro o no la riga dei dettagli o le varie colonne
    protected async void ShowDetails()
    {

        visibleMatricola = (WindowWidth >= 500 && !mobile) || (WindowWidth >= 300 && mobile);
        visibleDescrizione = (WindowWidth >= 700 && !mobile) || (WindowWidth >= 400 && mobile);
        visibleModello = (WindowWidth >= 900 && !mobile) || (WindowWidth >= 500 && mobile);
        visibleCommand = (WindowWidth >= 1100 && !mobile) || (WindowWidth >= 700 && mobile);
        visibleSelection = (WindowWidth >= 1400 && !mobile) || (WindowWidth >= 600 && mobile);

        if (WindowWidth < 1400)
        {
            Grid.BeginUpdate();
            Grid.DetailRowDisplayMode = GridDetailRowDisplayMode.Always;
            Grid.EndUpdate();
        }
        else
        {
            Grid.BeginUpdate();
            Grid.DetailRowDisplayMode = GridDetailRowDisplayMode.Never;
            Grid.EndUpdate();
        }
    }


    protected override void OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            // Subscribe to the OnResized event. This will do work when the browser is resized.
            listener.OnResized += WindowResized;
            listener.OnResized += OnWindowResized;
            
        }
    }

    void IDisposable.Dispose()
    {
        // Always use IDisposable in your component to unsubscribe from the event.
        // Be a good citizen and leave things how you found them.
        // This way event handlers aren't called when nobody is listening.
        listener.OnResized -= WindowResized;
    }

    // This method will be called when the window resizes.
    // It is ONLY called when the user stops dragging the window's edge. (It is already throttled to protect your app from perf. nightmares)
    async void WindowResized(object _, BrowserWindowSize window)
    {
        // Get the browsers's width / height
        browser = window;

        // Check a media query to see if it was matched. We can do this at any time, but it's best to check on each resize
        IsSmallMedia = await listener.MatchMedia(Breakpoints.SmallDown);

        WindowWidth = window.Width;
        WindowHeight = window.Height;
        ShowDetails();

        // We're outside of the component's lifecycle, be sure to let it know it has to re-render.
        StateHasChanged();
    }




 

    DxGrid Grid { get; set; }
    IGrid? UsersGrid { get; set; }
    private List<DispositivoModel> listaDispositivi;
    private List<DispositivoModel> viewDispositivi;
    private DispositivoModel newDispositivo = new DispositivoModel();
    private DispositivoModel dispositivoDaModificare;
    private DispositivoModel dispositivoModificato;
    string matricolaPk;


    protected override async Task OnInitializedAsync()
    {
        
        listaDispositivi = await _db.GetDispositivo();
        
    }

    void Grid_CustomizeElement(GridCustomizeElementEventArgs e) {
        if(e.ElementType == GridElementType.DetailCell) {
            e.Style = "padding: 0.5rem; opacity: 0.75";
        }
    }

    async Task ModificaDispositivoDX(GridEditModelSavingEventArgs e)
    {

        var DispositivoModified = (DispositivoModel)e.EditModel;

        //var dataItem = e.IsNew ? new DispositivoModel() : listaDispositivi.Find(editModel.Matricola);

        if (dispositivoDaModificare is null)
        {
            await _db.InsertDispositivo(dispositivoModificato);
        }
        else
            await _db.UpdateDispositivo(dispositivoDaModificare.Matricola, dispositivoModificato);
        await OnInitializedAsync();
    }

    async Task AggiungiDispositivoDX(GridEditModelSavingEventArgs e)
    {

        var DispositivoModified = (DispositivoModel)e.EditModel;

        //var dataItem = e.IsNew ? new DispositivoModel() : listaDispositivi.Find(editModel.Matricola);
        if(dispositivoDaModificare is null)
        {
            await _db.InsertDispositivo(dispositivoModificato);
        }
        else
        await _db.UpdateDispositivo(dispositivoDaModificare.Matricola, dispositivoModificato);
        await OnInitializedAsync();
    }

    async Task EliminaDispositivoDX(GridDataItemDeletingEventArgs e)
    {

        var DispositivoDeleted = (DispositivoModel)e.DataItem;

        //var dataItem = e.IsNew ? new DispositivoModel() : listaDispositivi.Find(editModel.Matricola);

        await _db.DeleteDispositivo(DispositivoDeleted);
        await OnInitializedAsync();
    }

    private async Task InsertDispositivo()
    {
        await _db.InsertDispositivo(newDispositivo);
        newDispositivo = new DispositivoModel();
        await OnInitializedAsync();
    }

    private async Task DeleteDispositivo(DispositivoModel d)
    {
        await _db.DeleteDispositivo(d);
        await OnInitializedAsync();
    }

    private async Task UpdateDispositivo()
    {
        await _db.UpdateDispositivo(matricolaPk, dispositivoDaModificare);

        dispositivoDaModificare = null;
        await OnInitializedAsync();
    }

    private async Task ModificaDispositivo(DispositivoModel d)
    {
        dispositivoDaModificare = new DispositivoModel
            {
                Matricola = d.Matricola,
                Descrizione = d.Descrizione,
                Modello = d.Modello
            };
        matricolaPk = d.Matricola;
        await OnInitializedAsync();
    }

    void OnClick()
    {
        Grid.ShowColumnChooser(".column-chooser-button");
    }

    List<DispositivoModel> FilteredData { get; set; }
    DispositivoModel Value { get; set; }

    string _filterText = "";
    string FilterText
    {
        get { return _filterText; }
        set
        {
            _filterText = value;
            FilteredData = listaDispositivi.FindAll(x => x.Text.Contains(_filterText, StringComparison.OrdinalIgnoreCase));
            Value = FilteredData.FirstOrDefault();
            InvokeAsync(StateHasChanged);
        }
    }


}

}
