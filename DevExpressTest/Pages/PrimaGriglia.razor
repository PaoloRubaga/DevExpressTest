@page "/primaGriglia"

@using DataAccessLibrary.Models
@using DataAccessLibrary
@using DevExpressTest.Components
@using DevExpressTest.Data

@inject IDispositivoData _db
@inject IJSRuntime JS
@inject BrowserService Service

<h3>PrimaGriglia</h3>

<h1>Window width: @WindowWidth</h1>
<h1>Window height: @WindowHeight</h1>



<input type="text" @bind-value="FilterText" @bind-value:event="oninput" placeholder="Search" />

<DxButton Text ="Seleziona Colonne"
    RenderStyle="ButtonRenderStyle.Secondary"
    CssClass="column-chooser-button"
    Click="OnClick">
</DxButton>

<DxGrid Data=@listaDispositivi
    EditModelSaving="ModificaDispositivoDX"
    EditMode="GridEditMode.PopupEditForm"
    DataItemDeleting="EliminaDispositivoDX"
    ShowFilterRow="true"
    @ref="Grid"
    DetailRowDisplayMode="GridDetailRowDisplayMode.Never"
    CustomizeElement="Grid_CustomizeElement">
    <Columns>
        <DxGridSelectionColumn Visible=@visibleSelection />
        <DxGridDataColumn FieldName="Matricola" Visible=@visibleMatricola />
        <DxGridDataColumn FieldName="Descrizione" Visible=@visibleDescrizione />
        <DxGridDataColumn FieldName="Modello" Visible=@visibleModello />
        
        <DxGridCommandColumn Visible=@visibleCommand />
    </Columns>
    <DetailRowTemplate>
        @{
            var disp = (DispositivoModel)context.DataItem;
            <text>Matricola: @disp.Matricola</text>

            <br />
            <text>Descrizione: @disp.Descrizione</text>

            <br />
            <text>Modello: @disp.Modello</text>

            <br />
        }
    </DetailRowTemplate>
    <EditFormTemplate Context="editFormContent ">
        @{
            dispositivoDaModificare = (DispositivoModel)editFormContent.DataItem;
            dispositivoModificato = (DispositivoModel)editFormContent.EditModel;
        }
        <DxFormLayout>
            <DxFormLayoutItem Caption="Matricola:">
                <DxTextBox @bind-Text="@dispositivoModificato.Matricola" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Descrizione:">
                <DxTextBox @bind-Text="@dispositivoModificato.Descrizione" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Modello:">
                <DxTextBox @bind-Text="@dispositivoModificato.Modello" />
            </DxFormLayoutItem>
        </DxFormLayout>
    </EditFormTemplate>
</DxGrid>

<p />
<DxButton Click="@(() => Grid.SortBy("Descrizione"))">ordina per descrizione</DxButton>





@code {
    public bool visibleMatricola = true, visibleDescrizione = true, visibleModello = true, visibleCommand = true, visibleSelection = true;

    //utilizzando javascript ottengo le dimensioni della finestra
    async Task GetDimensions()
    {
        var dimension = await Service.GetDimensions();
        WindowHeight = dimension.Height;
        WindowWidth = dimension.Width;
        ShowDetails();

    }

    //in base alla larghezza mostro o no la riga dei dettagli o le varie colonne
    protected void ShowDetails()
    {
        visibleMatricola = WindowWidth >= 500;
        visibleDescrizione = WindowWidth >= 700;
        visibleModello = WindowWidth >= 900;
        visibleCommand = WindowWidth >= 1100;
        visibleSelection = WindowWidth >= 1400;

        if (WindowWidth < 1400)
        {
            Grid.BeginUpdate();
            Grid.DetailRowDisplayMode = GridDetailRowDisplayMode.Always;
            Grid.EndUpdate();
        }
        else
        {
            Grid.BeginUpdate();
            Grid.DetailRowDisplayMode = GridDetailRowDisplayMode.Never;
            Grid.EndUpdate();
        }
    }

    private DotNetObjectReference<PrimaGriglia> _objectReference;
    public int WindowWidth { get; set; }
    public int WindowHeight { get; set; }

    protected override void OnInitialized()
    {
        _objectReference = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitWindowResizeListener();
        }
    }

    [JSInvokable]
    public void UpdateWindowSize(int windowWidth, int windowHeight)
    {
        WindowWidth = windowWidth;
        WindowHeight = windowHeight;
        StateHasChanged();
        ShowDetails();
    }

    private async Task InitWindowResizeListener()
    {
        await JS.InvokeVoidAsync("AddWindowResizeListener", _objectReference);
    }

    public async ValueTask DisposeAsync()
    {
        await JS.InvokeVoidAsync("RemoveWindowResizeListener", _objectReference);
        _objectReference?.Dispose();
    }

    DxGrid Grid { get; set; }
    IGrid? UsersGrid { get; set; }
    private List<DispositivoModel> listaDispositivi;
    private List<DispositivoModel> viewDispositivi;
    private DispositivoModel newDispositivo = new DispositivoModel();
    private DispositivoModel dispositivoDaModificare;
    private DispositivoModel dispositivoModificato;
    string matricolaPk;


    protected override async Task OnInitializedAsync()
    {
        listaDispositivi = await _db.GetDispositivo();
        await GetDimensions();
    }


    void Grid_CustomizeElement(GridCustomizeElementEventArgs e) {
        if(e.ElementType == GridElementType.DetailCell) {
            e.Style = "padding: 0.5rem; opacity: 0.75";
        }
    }

    async Task ModificaDispositivoDX(GridEditModelSavingEventArgs e)
    {

        var DispositivoModified = (DispositivoModel)e.EditModel;

        //var dataItem = e.IsNew ? new DispositivoModel() : listaDispositivi.Find(editModel.Matricola);

        if (dispositivoDaModificare is null)
        {
            await _db.InsertDispositivo(dispositivoModificato);
        }
        else
            await _db.UpdateDispositivo(dispositivoDaModificare.Matricola, dispositivoModificato);
        await OnInitializedAsync();
    }

    async Task AggiungiDispositivoDX(GridEditModelSavingEventArgs e)
    {

        var DispositivoModified = (DispositivoModel)e.EditModel;

        //var dataItem = e.IsNew ? new DispositivoModel() : listaDispositivi.Find(editModel.Matricola);
        if(dispositivoDaModificare is null)
        {
            await _db.InsertDispositivo(dispositivoModificato);
        }
        else
        await _db.UpdateDispositivo(dispositivoDaModificare.Matricola, dispositivoModificato);
        await OnInitializedAsync();
    }

    async Task EliminaDispositivoDX(GridDataItemDeletingEventArgs e)
    {

        var DispositivoDeleted = (DispositivoModel)e.DataItem;

        //var dataItem = e.IsNew ? new DispositivoModel() : listaDispositivi.Find(editModel.Matricola);

        await _db.DeleteDispositivo(DispositivoDeleted);
        await OnInitializedAsync();
    }

    private async Task InsertDispositivo()
    {
        await _db.InsertDispositivo(newDispositivo);
        newDispositivo = new DispositivoModel();
        await OnInitializedAsync();
    }

    private async Task DeleteDispositivo(DispositivoModel d)
    {
        await _db.DeleteDispositivo(d);
        await OnInitializedAsync();
    }

    private async Task UpdateDispositivo()
    {
        await _db.UpdateDispositivo(matricolaPk, dispositivoDaModificare);

        dispositivoDaModificare = null;
        await OnInitializedAsync();
    }

    private async Task ModificaDispositivo(DispositivoModel d)
    {
        dispositivoDaModificare = new DispositivoModel
            {
                Matricola = d.Matricola,
                Descrizione = d.Descrizione,
                Modello = d.Modello
            };
        matricolaPk = d.Matricola;
        await OnInitializedAsync();
    }

    void OnClick()
    {
        Grid.ShowColumnChooser(".column-chooser-button");
    }

    List<DispositivoModel> FilteredData { get; set; }
    DispositivoModel Value { get; set; }

    string _filterText = "";
    string FilterText
    {
        get { return _filterText; }
        set
        {
            _filterText = value;
            FilteredData = listaDispositivi.FindAll(x => x.Text.Contains(_filterText, StringComparison.OrdinalIgnoreCase));
            Value = FilteredData.FirstOrDefault();
            InvokeAsync(StateHasChanged);
        }
    }


}
