@page "/grigliaOrdiniTest"

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using DevExpressTest.Components
@using DevExpress.Data.Filtering
@using DevExpress.Data.Filtering.Helpers
@using DevExpress.Blazor
@using DevExpress.Blazor.Internal


@inject NavigationManager NavManager
@inject IOrdineData _db
@inject IOrdiniDataNoDapper _dbNoDapper


<h3>GigliaOrdiniTest</h3>

<DxButton Text="Seleziona Colonne"
          RenderStyle="ButtonRenderStyle.Secondary"
          CssClass="column-chooser-button"
          Click="OnClick">
</DxButton>


<DxGrid Data=@listaOrdini
        UnboundColumnData="Grid_CustomUnboundColumnData"

        EditStart="ModificaOrdineToPage"
        DataItemDeleting="EliminaOrdine"
        ShowFilterRow="true"
        PageSize="@pageSize"
        @ref="Grid"
        CssClass="mw-1100">
    <Columns>

        <DxGridSelectionColumn Width="50" />
        <DxGridDataColumn FieldName="DataOrdine" SortIndex="0" Width="200" TextAlignment="GridTextAlignment.Center" >
            <FilterRowCellTemplate Context="filterContext">
                <DxFormLayout ItemCaptionAlignment="ItemCaptionAlignment.None">
                    <DxFormLayoutItem ColSpanMd="12">
                        <DxDateEdit Date="@StartDate"
                                    DateChanged=@((DateTime? newStartDateValue) => {
                                    StartChanged(newStartDateValue);
                                    filterContext.FilterCriteria = GetNewCriteria(filterContext);
                                    })
                                    NullText="Data Inizio"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto">
                        </DxDateEdit>
                    
                        <DxDateEdit Date="@EndDate"
                                    DateChanged=@((DateTime? newEndDateValue) => {
                                    EndChanged(newEndDateValue);
                                    filterContext.FilterCriteria = GetNewCriteria(filterContext);
                                    })
                                    NullText="Data Fine"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" >
                        </DxDateEdit>
                    </DxFormLayoutItem>
                </DxFormLayout>
            </FilterRowCellTemplate>        
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="NomeProdotto" TextAlignment="GridTextAlignment.Center" >
            <FilterRowCellTemplate>
                <DxTagBox TData="string"
                          TValue="string"
                          Data="NomeProdotto"
                          Values="GetTagBoxValues(context)"
                          ValuesChanged="newValues => UpdateCriteria(newValues, context)" />
            </FilterRowCellTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="Stato" SortOrder="GridColumnSortOrder.Descending" TextAlignment="GridTextAlignment.Center" >
            <FilterRowCellTemplate>
                <DxTagBox TData="string"
                          TValue="string"
                          Data="Countries"
                          Values="GetTagBoxValues(context)"
                          ValuesChanged="newValues => UpdateCriteria(newValues, context)" />
            </FilterRowCellTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="Citta" TextAlignment="GridTextAlignment.Center" />
        <DxGridDataColumn FieldName="PrezzoUnitario" Width="150" TextAlignment="GridTextAlignment.Center" > 
            <FilterRowCellTemplate Context="filterContextPrezzoUnitario">
                <DxFormLayout ItemCaptionAlignment="ItemCaptionAlignment.None">
                    <DxFormLayoutItem ColSpanMd="12">
                        <DxMaskedInput Value="@PrezzoUnitarioMinore"
                                       ValueChanged=@((int? newStartValue) => {
                                       StartChangedPrezzoUnitario(newStartValue);
                                       filterContextPrezzoUnitario.FilterCriteria = GetNewCriteriaPrezzoUnitario(filterContextPrezzoUnitario);
                                       })
                                        Mask="@NumericMask.WholeNumber" 
                                        NullText="Minore"
                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"/>
                        <DxMaskedInput Value="@PrezzoUnitarioMaggiore"
                                       ValueChanged=@((int? newEndValue) => {
                                       EndChangedPrezzoUnitario(newEndValue);
                                       filterContextPrezzoUnitario.FilterCriteria = GetNewCriteriaPrezzoUnitario(filterContextPrezzoUnitario);
                                       })
                                       Mask="@NumericMask.WholeNumber"
                                       NullText="Maggiore"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                        
                    </DxFormLayoutItem>
                </DxFormLayout>
            </FilterRowCellTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="Quantita" FilterRowOperatorType="GridFilterRowOperatorType.Default" Width="180" TextAlignment="GridTextAlignment.Center">
            <FilterRowCellTemplate Context="filterContextQuantita">
                <OperatorType FilterContext="@filterContextQuantita">
                    
                    @if (filterContextQuantita.DataColumn.FilterRowOperatorType is not GridFilterRowOperatorType.Default)
                    {
                        <DxMaskedInput Mask="@NumericMask.WholeNumber"
                                   Value="(int?)filterContextQuantita.FilterRowValue"
                                   ValueChanged="(int? v) => filterContextQuantita.FilterRowValue = v" />
                    }
                    else
                    {

                        <DxFormLayout ItemCaptionAlignment="ItemCaptionAlignment.None">
                            <DxFormLayoutItem ColSpanMd="12">
                                <DxMaskedInput Value="@PrezzoUnitarioMinore"
                                       ValueChanged=@((int? newStartValue) => {
                                       StartChangedPrezzoUnitario(newStartValue);
                                           filterContextQuantita.FilterCriteria = GetNewCriteriaPrezzoUnitario(filterContextQuantita);
                                       })
                                        Mask="@NumericMask.WholeNumber" 
                                        NullText="Minore"
                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                <DxMaskedInput Value="@PrezzoUnitarioMaggiore"
                                       ValueChanged=@((int? newEndValue) => {
                                       EndChangedPrezzoUnitario(newEndValue);
                                          filterContextQuantita.FilterCriteria = GetNewCriteriaPrezzoUnitario(filterContextQuantita);
                                       })
                                       Mask="@NumericMask.WholeNumber"
                                       NullText="Maggiore"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />

                            </DxFormLayoutItem>
                        </DxFormLayout>
            
                    }
                </OperatorType>
            </FilterRowCellTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="Stato Ordine" UnboundType="GridUnboundColumnType.String" />
        <DxGridCommandColumn Width="80" >

        </DxGridCommandColumn>
    </Columns>
    <EditFormTemplate Context="editFormContent ">
        @{
            ordineDaModificare = (OrdineModel)editFormContent.DataItem;
            ordineModificato = (OrdineModel)editFormContent.EditModel;
        }
        <DxFormLayout>
            <DxFormLayoutItem Caption="DataOrdine:">
                <DxDateEdit @bind-Date="@ordineModificato.DataOrdine" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="NomeProdotto:">
                <DxTextBox @bind-Text="@ordineModificato.NomeProdotto" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Stato:">
                <DxTextBox @bind-Text="@ordineModificato.Stato" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Citta:">
                <DxTextBox @bind-Text="@ordineModificato.Citta" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="PrezzoUnitario:">
                <DxMaskedInput @bind-Value="@ordineModificato.PrezzoUnitario" Mask="@NumericMask.WholeNumber" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Quantita:">
                <DxMaskedInput @bind-Value="@ordineModificato.Quantita" Mask="@NumericMask.WholeNumber" />
            </DxFormLayoutItem>
        </DxFormLayout>
    </EditFormTemplate>
</DxGrid>




@code {

    DxGrid Grid { get; set; }
    private List<OrdineModel> listaOrdini;
    private OrdineModel ordineDaModificare;
    private OrdineModel ordineModificato;
    private int pageSize = 8;
    private DateTime? StartDate { get; set; }
    private DateTime? EndDate { get; set; }
    private int MinDuration { get; set; } = 0;
    private int? PrezzoUnitarioMinore {get; set;}
    private int? PrezzoUnitarioMaggiore {get; set;}
    private int? QuantitaMinore {get; set;}
    private int? QuantitaMaggiore { get; set; }
    List<string> NomeProdotto = new List<string>();
    List<string> Countries = new List<string>();
    IEnumerable<string> Cities { get; set; }
    List<StatoOrdineModel> lookupList;
    IGridCommandColumn CommandColumn { get; set; }

    protected override async Task OnInitializedAsync()
    {
        listaOrdini = await _dbNoDapper.GetOrdini();
        foreach (OrdineModel order in listaOrdini)
        {
            if (!NomeProdotto.Contains(order.NomeProdotto))
                NomeProdotto.Add(order.NomeProdotto);
            if (!Countries.Contains(order.Stato))
                Countries.Add(order.Stato);
        }

        lookupList = await _dbNoDapper.GetStatoOrdineById();
        
        //Cities = DbContext.GetOrdini().Select(x => x.Citta).Distinct().ToArray();
        //controllare esempio :
        //https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxGrid.SetFilterCriteria(DevExpress.Data.Filtering.CriteriaOperator)

    }


    void Grid_CustomUnboundColumnData(GridUnboundColumnDataEventArgs e)
    {

        if (e.FieldName == "Stato Ordine")
        {
            int idDaConvertire = Convert.ToInt32(e.GetRowValue("IdStatoOrdine"));
            OrdineModel riga = (OrdineModel)e.DataItem;
            var lookupItem = lookupList.FirstOrDefault(x => x.Id == riga.IdStatoOrdine);
            e.Value = lookupItem.StatoOrdine;
        }
    }

    IEnumerable<string> GetTagBoxValues(GridDataColumnFilterRowCellTemplateContext context)
    {
        if (context.FilterCriteria.ReferenceEqualsNull())
            return null;
        if (!context.FilterCriteria.Is<InOperator>(out var inOperator))
            return null;
        if (!inOperator.LeftOperand.Is<OperandProperty>(out var leftOperand))
            return null;
        if (leftOperand.PropertyName != context.DataColumn.FieldName)
            return null;

        var result = new List<string>();
        foreach (var operand in inOperator.Operands)
        {
            if (!operand.Is<OperandValue>(out var operandValue))
                return null;
            result.Add((string)operandValue.Value);
        }
        return result;
    }

    void UpdateCriteria(IEnumerable<string> newValues, GridDataColumnFilterRowCellTemplateContext context)
    {
        if (!newValues.Any())
        {
            context.FilterCriteria = null;
            return;
        }
        context.FilterCriteria = new InOperator(
            new OperandProperty(context.DataColumn.FieldName),
            newValues.Select(value => new OperandValue(value))
        );
    }

    class OperatorTypeWrapper
    {
        public OperatorTypeWrapper(GridFilterRowOperatorType value, string displayText)
        {
            Value = value;
            DisplayText = displayText;
        }
        public GridFilterRowOperatorType Value { get; set; }
        public string DisplayText { get; set; }
        public string IconPath => $"images/filterIcons/{DisplayText}.svg";
    };


    async Task ModificaOrdine(GridEditModelSavingEventArgs e)
    {

        var OrdineModified = (OrdineModel)e.EditModel;

        if (ordineDaModificare is null)
        {
            await _dbNoDapper.InsertOrdine(ordineModificato);
        }
        else
            await _dbNoDapper.UpdateOrdine(ordineDaModificare.Id.ToString(), ordineModificato);
        await OnInitializedAsync();
    }

    protected void ModificaOrdineToPage(GridEditStartEventArgs e)
    {
        var OrdineModified = (OrdineModel)e.DataItem;
        if(OrdineModified is null)
            NavManager.NavigateTo($"/formAddNew/{0}");           
        else
            NavManager.NavigateTo($"/formAddNew/{OrdineModified.Id}");
    }

    async Task EliminaOrdine(GridDataItemDeletingEventArgs e)
    {
        var ordineDeleted = (OrdineModel)e.DataItem;

        await _dbNoDapper.DeleteOrdine(ordineDeleted);
        await OnInitializedAsync();
    }

    private async Task DeleteDispositivo(OrdineModel d)
    {
        await _db.DeleteOrdine(d);
        await OnInitializedAsync();
    }

    void OnClick()
    {
        Grid.ShowColumnChooser(".column-chooser-button");
    }

    private CriteriaOperator GetNewCriteria(GridDataColumnFilterRowCellTemplateContext context)
    {
        if (StartDate.HasValue && EndDate.HasValue)
        {
            var operandProperty = new OperandProperty(context.DataColumn.FieldName);
            var startDate = StartDate.Value.Date;
            var endDate = EndDate.Value.Date.AddDays(1);
            return operandProperty >= startDate & operandProperty <= endDate;
        }
        else
            return null;
    }
    void StartChanged(DateTime? newDate)
    {
        StartDate = newDate;
        if (StartDate.HasValue)
        {
            StartDate = StartDate.Value.Date;
            if (EndDate.HasValue && EndDate.Value.Subtract(StartDate.Value).Days < MinDuration)
                EndDate = StartDate.Value.AddDays(MinDuration);
        }
    }
    void EndChanged(DateTime? newDate)
    {
        EndDate = newDate;
        if (EndDate.HasValue)
        {
            EndDate = EndDate.Value.Date;
            if (StartDate.HasValue && EndDate.Value.Subtract(StartDate.Value).Days < MinDuration)
                StartDate = EndDate.Value.AddDays(-MinDuration);
        }
    }
    private CriteriaOperator GetNewCriteriaPrezzoUnitario(GridDataColumnFilterRowCellTemplateContext context)
    {
        if (PrezzoUnitarioMinore.HasValue && PrezzoUnitarioMaggiore.HasValue)
        {
            var operandProperty = new OperandProperty(context.DataColumn.FieldName);
            var startDate = PrezzoUnitarioMinore.Value;
            var endDate = PrezzoUnitarioMaggiore.Value;
            return operandProperty >= startDate & operandProperty <= endDate;
        }
        else
            return null;
    }
    void StartChangedPrezzoUnitario(int? newStart)
    {
        PrezzoUnitarioMinore = newStart;
        if (PrezzoUnitarioMinore.HasValue)
        {
            
            if (PrezzoUnitarioMaggiore.HasValue && (PrezzoUnitarioMaggiore - PrezzoUnitarioMinore) < MinDuration)
                PrezzoUnitarioMaggiore = PrezzoUnitarioMinore + MinDuration;
        } 
    }
    void EndChangedPrezzoUnitario(int? newEnd)
    {
        PrezzoUnitarioMaggiore = newEnd;
        if (PrezzoUnitarioMaggiore.HasValue)
        {
           
            if (PrezzoUnitarioMinore.HasValue && (PrezzoUnitarioMaggiore - PrezzoUnitarioMinore) < MinDuration)
                PrezzoUnitarioMinore = PrezzoUnitarioMinore - MinDuration;
        }
    }




}
